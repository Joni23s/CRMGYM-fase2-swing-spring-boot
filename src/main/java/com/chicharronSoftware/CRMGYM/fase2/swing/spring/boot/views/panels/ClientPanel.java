package com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.views.panels;

import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.dto.ClientDTO;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.dto.PlanDTO;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.mappers.ClientMapper;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.model.Client;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.model.Plan;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.service.PlanService;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.utils.PromptSupport;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.validations.ClientValidation;
import org.springframework.stereotype.Component;
import com.chicharronSoftware.CRMGYM.fase2.swing.spring.boot.service.ClientService;

import javax.swing.*;

import org.springframework.beans.factory.annotation.Autowired;

import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class ClientPanel extends JPanel {
    
    private DefaultTableModel tableModelClients;
    private final ClientService clientService;
    private final PlanService planService;
    private ClientValidation clientValidation;
    private Border defaultBorder;
    private boolean isEditMode = false;
    private int editingDni = -1;


    @Autowired
    public ClientPanel(ClientService clientService, PlanService planService, ClientValidation clientValidation) {
        this.clientService = clientService;
        this.planService = planService;
        this.clientValidation = clientValidation;

        initComponents();
        initClientTable();
        initClientPanel();
    }

    /**
     * Métodos de inicio de componentes
    */

    private void initClientTable() {
        tableModelClients = new DefaultTableModel();
        tableListClients.setModel(tableModelClients);
        // Definir cabeceras de la tabla
        tableModelClients.setColumnIdentifiers(new Object[]{
                "DNI", "Nombre", "Apellido", "Email", "Teléfono", "Estado", "Plan"
        });
        loadClientsToTable(clientService.getAllClientsDTO());
    }

    private void initClientPanel() {
        this.defaultBorder = txtName.getBorder();
        loadPlansToComboBox(); // Llena el combo de planes disponibles desde DB
        resetForm(); // Limpia los campos del formulario
    }

    /**
     * Carga la lista de clientes en la tabla.
     */
    private void loadClientsToTable(List<ClientDTO> clients) {
        //Clientes desde el service
        tableModelClients.setRowCount(0);

        for (ClientDTO dto : clients) {
            tableModelClients.addRow(new Object[] {
                    dto.getDocumentId(),
                    dto.getName(),
                    dto.getLastName(),
                    dto.getEmail(),
                    dto.getPhoneNumber(),
                    dto.getStatus(),
                    dto.getNamePlan()
            });
        }
    }

    /**
     * Carga todos los planes disponibles en el comboBox.
     * El primer ítem es un texto fijo obligatorio.
     */
    private void loadPlansToComboBox() {
        comboBoxPlan.removeAllItems();
        comboBoxPlan.addItem("Seleccione un Plan *");

        List<PlanDTO> planes = planService.findByIsActiveDTO(true);
        if (planes != null) {
            for (PlanDTO plan : planes) {
                comboBoxPlan.addItem(plan.toString());
            }
        }
    }

    private void resetForm() {
        PromptSupport.setPrompt("Ingrese el DNI *", txtDni);
        PromptSupport.setPrompt("Ingrese el nombre *", txtName);
        PromptSupport.setPrompt("Ingrese el apellido *", txtLastName);
        PromptSupport.setPrompt("Ingrese el mail", txtMail);
        PromptSupport.setPrompt("Ingrese el celular", txtPhone);
        comboBoxPlan.setSelectedIndex(0);
        titleCharge.setText("Nuevo Cliente");
        isEditMode = false;
        txtDni.setBorder(defaultBorder);
        txtName.setBorder(defaultBorder);
        txtLastName.setBorder(defaultBorder);
        txtMail.setBorder(defaultBorder);
        txtPhone.setBorder(defaultBorder);
        comboBoxPlan.setBorder(defaultBorder);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMainClient = new javax.swing.JPanel();
        titleMain = new javax.swing.JLabel();
        panelTable = new javax.swing.JPanel();
        scrollPaneTable = new javax.swing.JScrollPane();
        tableListClients = new javax.swing.JTable();
        titleList = new javax.swing.JLabel();
        btnInactive = new javax.swing.JButton();
        btnActive = new javax.swing.JButton();
        btnMust = new javax.swing.JButton();
        btnPerDay = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        panelNewClient = new javax.swing.JPanel();
        titleCharge = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        labelLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        labelDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        labelPlan = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        labelPhone = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        labelMail = new javax.swing.JLabel();
        btnActivate = new javax.swing.JButton();
        btnDeactivate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        comboBoxPlan = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(750, 585));

        panelMainClient.setBackground(new java.awt.Color(102, 102, 102));
        panelMainClient.setMinimumSize(new java.awt.Dimension(749, 580));

        titleMain.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleMain.setText("Menú de Clientes");

        tableListClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPaneTable.setViewportView(tableListClients);

        titleList.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleList.setText("Lista de Clientes");

        btnInactive.setText("Inactivos");
        btnInactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInactiveActionPerformed(evt);
            }
        });

        btnActive.setText("Activos");
        btnActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActiveActionPerformed(evt);
            }
        });

        btnMust.setText("Deben");

        btnPerDay.setText("Al día");

        btnModify.setText("Modificar");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnAll.setText("Todos");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTableLayout.createSequentialGroup()
                        .addComponent(btnPerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                        .addComponent(btnActive, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnInactive, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMust, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(titleList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addGap(185, 185, 185))
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrollPaneTable, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActive, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInactive, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMust, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        titleCharge.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleCharge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleCharge.setText("Nuevo Cliente");

        labelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelName.setText("Nombre");

        txtName.setText("Ingrese el nombre *");

        labelLastName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLastName.setText("Apellido");

        txtLastName.setText("Ingrese el apellido *");

        labelDni.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDni.setText("DNI");

        txtDni.setText("Ingrese el DNI *");

        labelPlan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPlan.setText("Seleccione el plan");

        txtPhone.setText("Ingrese el celular");

        labelPhone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPhone.setText("Celular");

        txtMail.setText("Ingrese el mail");

        labelMail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMail.setText("Mail");

        btnActivate.setText("Activar");
        btnActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivateActionPerformed(evt);
            }
        });

        btnDeactivate.setText("Desactivar");
        btnDeactivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeactivateActionPerformed(evt);
            }
        });

        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClean.setText("Limpiar");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        comboBoxPlan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelNewClientLayout = new javax.swing.GroupLayout(panelNewClient);
        panelNewClient.setLayout(panelNewClientLayout);
        panelNewClientLayout.setHorizontalGroup(
            panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewClientLayout.createSequentialGroup()
                .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNewClientLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(btnClean)
                        .addGap(67, 67, 67))
                    .addGroup(panelNewClientLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleCharge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelLastName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDni, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDni, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPhone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelMail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtMail, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxPlan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelNewClientLayout.createSequentialGroup()
                                .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnActivate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDeactivate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        panelNewClientLayout.setVerticalGroup(
            panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewClientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelLastName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelDni)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPhone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelMail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPlan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelNewClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnActivate, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeactivate, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClean)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelMainClientLayout = new javax.swing.GroupLayout(panelMainClient);
        panelMainClient.setLayout(panelMainClientLayout);
        panelMainClientLayout.setHorizontalGroup(
            panelMainClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainClientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelNewClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelMainClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTable, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7))
        );
        panelMainClientLayout.setVerticalGroup(
            panelMainClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainClientLayout.createSequentialGroup()
                .addGroup(panelMainClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelMainClientLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelNewClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMainClientLayout.createSequentialGroup()
                        .addComponent(titleMain)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(panelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMainClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMainClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento asociado al botón "Limpiar".
     * Reinicia el formulario al estado inicial.
     */
    private void btnCleanActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        resetForm();
    }//GEN-LAST:event_btnCleanActionPerformed

    /**
     * Valida el formulario de carga de clientes.
     * Marca los campos con borde rojo si hay errores.
     */
    private boolean isFormValid() {
        boolean valid = true;

        // Validación de nombre
        if (!clientValidation.isValidName(txtName.getText().trim())) {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        } else {
            txtName.setBorder(defaultBorder);
        }

        // Validación de apellido
        if (!clientValidation.isValidName(txtLastName.getText().trim())) {
            txtLastName.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        } else {
            txtLastName.setBorder(defaultBorder);
        }

        // Validación de DNI
        String dniText = txtDni.getText().trim();
        if (dniText.isEmpty() || dniText.equals("Ingrese el DNI *")) {
            txtDni.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        } else {
            try {
                Integer.parseInt(dniText); // Validar que sea numérico
                txtDni.setBorder(defaultBorder);
            } catch (NumberFormatException e) {
                txtDni.setBorder(BorderFactory.createLineBorder(Color.RED));
                valid = false;
            }
        }

        // Validación del plan
        boolean planValid = validateComboBox(comboBoxPlan, 0);
        valid &= planValid;

        return valid;
    }

    private boolean validateComboBox(JComboBox<?> comboBox, int placeholderIndex) {
        if (comboBox.getSelectedIndex() == placeholderIndex) {
            comboBox.setBorder(BorderFactory.createLineBorder(Color.RED));
            return false;
        } else {
            comboBox.setBorder(defaultBorder);
            return true;
        }
    }

    private void btnSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String name = txtName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String dniText = txtDni.getText().trim();
            String phoneText = txtPhone.getText().trim();
            String email = txtMail.getText().trim();
            String selectedPlanName = (String) comboBoxPlan.getSelectedItem();

            // Validaciones obligatorias
            if (!isFormValid()) {
                JOptionPane.showMessageDialog(this, "Por favor completá todos los campos obligatorios.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // DNI numérico
            int dni;
            try {
                dni = Integer.parseInt(dniText);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "DNI debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar si el DNI ya existe
            if (!isEditMode && !clientValidation.isDniAvailable(dni)) {
                JOptionPane.showMessageDialog(this, "❌ Ya existe un cliente con DNI: " + dni + "\nIntente con un DNI diferente.", "DNI duplicado", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validación de email (si se cargó)
            if (!email.isEmpty() && !clientValidation.isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "El email ingresado no tiene un formato válido.", "Email inválido", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de teléfono (si se cargó)
            String phone = phoneText.isEmpty() ? null : phoneText;
            if (phone != null && !clientValidation.isValidPhone(phone)) {
                JOptionPane.showMessageDialog(this, "El número de celular ingresado no es válido.", "Teléfono inválido", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener plan
            Optional<Plan> planOptional = planService.findByNamePlanIgnoreCase(selectedPlanName);
            if (planOptional.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontró el plan seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear cliente
            Client client = new Client(dni, name, lastName, email, phone, true, planOptional.get());

            // Guardar
            clientService.save(client);
            String msg = isEditMode ? "Cliente actualizado correctamente." : "Cliente guardado correctamente.";
            JOptionPane.showMessageDialog(this, msg, "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al guardar el cliente: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Reiniciar estado
        resetForm();
        titleCharge.setText("Nuevo Cliente");
        isEditMode = false;
        editingDni = -1;
        txtDni.setEnabled(true);
        titleList.setText("Lista de Clientes");
        loadClientsToTable(clientService.getAllClientsDTO());

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnModifyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        int filaSelected = tableListClients.getSelectedRow();

        if (filaSelected == -1) {
            JOptionPane.showMessageDialog(this,
                    "Selecciona a un cliente primero.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Obtener datos de la fila seleccionada
        String documentId = tableListClients.getValueAt(filaSelected, 0).toString();
        String name = tableListClients.getValueAt(filaSelected, 1).toString();
        String lastName = tableListClients.getValueAt(filaSelected, 2).toString();
        String email = tableListClients.getValueAt(filaSelected, 3).toString();
        String phone = tableListClients.getValueAt(filaSelected, 4).toString();
        String namePlan = tableListClients.getValueAt(filaSelected, 6).toString();

        // Cargar en los campos del formulario
        txtDni.setText(documentId);
        txtName.setText(name);
        txtLastName.setText(lastName);
        txtMail.setText(email);
        txtPhone.setText(phone);
        comboBoxPlan.setSelectedItem(namePlan);

        // Activar modo edición
        isEditMode = true;
        editingDni = Integer.parseInt(documentId); // ya lo tenés arriba
        txtDni.setEnabled(false); // para evitar que cambien el DNI
        titleCharge.setText("Modificar Cliente");
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnAllActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        titleList.setText("Lista de Clientes");
        loadClientsToTable(clientService.getAllClientsDTO());
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnActiveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnActiveActionPerformed
        titleList.setText("Lista de Clientes: Activos");
        loadClientsToTable(clientService.findByIsActiveDTO(true));
    }//GEN-LAST:event_btnActiveActionPerformed

    private void btnInactiveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnInactiveActionPerformed
        titleList.setText("Lista de Clientes: Inactivos");
        loadClientsToTable(clientService.findByIsActiveDTO(false));
    }//GEN-LAST:event_btnInactiveActionPerformed

    private void btnActivateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnActivateActionPerformed
        modifyStatus(true);
    }//GEN-LAST:event_btnActivateActionPerformed

    private void btnDeactivateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeactivateActionPerformed
        modifyStatus(false);
    }//GEN-LAST:event_btnDeactivateActionPerformed


    private void modifyStatus(boolean status) {
        if (!isEditMode) {
            JOptionPane.showMessageDialog(this,
                    "Solo se puede cambiar el estado de un Cliente ya creado.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        int filaSelected = tableListClients.getSelectedRow();
        if (filaSelected == -1) {
            JOptionPane.showMessageDialog(this,
                    "Selecciona a un cliente primero.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int dni = Integer.parseInt(tableListClients.getValueAt(filaSelected, 0).toString());
        Optional<Client> clientOpt = clientService.findById(dni);

        if (clientOpt.isPresent()) {
            Client client = clientOpt.get();
            client.setIsActive(status);
            clientService.save(client);

            JOptionPane.showMessageDialog(this,
                    "Estado actualizado correctamente.",
                    "Éxito",
                    JOptionPane.INFORMATION_MESSAGE);

            loadClientsToTable(clientService.findByIsActiveDTO(status));
        }
    }

    private void btnSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        Set<Client> clients = new HashSet<>();

        // Buscar por nombre
        String name = txtName.getText().trim();
        if (!name.isEmpty() && !name.equals("Ingrese el nombre *")) {
            clients.addAll(clientService.findByName(name));
        }

        // Buscar por apellido
        String lastName = txtLastName.getText().trim();
        if (!lastName.isEmpty() && !lastName.equals("Ingrese el apellido *")) {
            clients.addAll(clientService.findByLastName(lastName));
        }

        // Buscar por DNI
        String dniText = txtDni.getText().trim();
        if (!dniText.isEmpty() && !dniText.equals("Ingrese el DNI *")) {
            try {
                int dni = Integer.parseInt(dniText);
                clientService.findById(dni).ifPresent(clients::add);
            } catch (NumberFormatException ignored) {
                // Podés mostrar un mensaje si querés
            }
        }

        // Buscar por teléfono
        String phone = txtPhone.getText().trim();
        if (!phone.isEmpty() && !phone.equals("Ingrese el celular")) {
            clients.addAll(clientService.findByPhoneNumber(phone));
        }

        // Buscar por email
        String email = txtMail.getText().trim();
        if (!email.isEmpty() && !email.equals("Ingrese el mail")) {
            clients.addAll(clientService.findByEmail(email));
        }

        // Buscar por plan
        if (comboBoxPlan.getSelectedIndex() != 0) {
            String selectedPlan = comboBoxPlan.getSelectedItem().toString();
            clients.addAll(clientService.findByCurrentPlan(selectedPlan));
        }

        // Mostrar resultados
        titleList.setText("Lista de Clientes: Buscados");
        loadClientsToTable(clients.stream()
                .map(ClientMapper::toDTO)
                .collect(Collectors.toList()));
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Resetea el formulario a su estado inicial:
     * - Restaura bordes
     * - Aplica placeholders
     * - Reinicia selección del combo
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivate;
    private javax.swing.JButton btnActive;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDeactivate;
    private javax.swing.JButton btnInactive;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnMust;
    private javax.swing.JButton btnPerDay;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboBoxPlan;
    private javax.swing.JLabel labelDni;
    private javax.swing.JLabel labelLastName;
    private javax.swing.JLabel labelMail;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelPlan;
    private javax.swing.JPanel panelMainClient;
    private javax.swing.JPanel panelNewClient;
    private javax.swing.JPanel panelTable;
    private javax.swing.JScrollPane scrollPaneTable;
    private javax.swing.JTable tableListClients;
    private javax.swing.JLabel titleCharge;
    private javax.swing.JLabel titleList;
    private javax.swing.JLabel titleMain;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
